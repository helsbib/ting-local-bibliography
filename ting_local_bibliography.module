<?php

define('TING_LOCAL_BIBLIOGRAPHY_DEFAULT_MAILTEXT',
'!name would like to order !material_title (!material_url).

The item should be delivered to !library.

The user provided the following information:
Name: !name
Address: !address
City: !city
Date of birth: !date_of_birth
Email: !email
Phone: !phone');

/**
 * Implementation of hook_menu().
 */
function ting_local_bibliography_menu() {
  $items = array();

  $items['ting/local_bibliography/order/%'] = array(
    'title' => 'Order item',
    'page callback' => 'ting_local_bibliography_page_order_item',
    'page arguments' => array(3),
  	'access arguments' => array('access content'),
    'file' => 'ting_local_bibliography.pages.inc',
  	'type' => MENU_CALLBACK,
  );

  $items['admin/settings/ting/local_bibliography'] = array(
    'title' => 'Local bibliography settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_local_bibliography_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_local_bibliography.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_ting_object_is().
 */
function ting_local_bibliography_ting_object_is($object, $class) {
  // Objects are considered local bibliography if they have the
  // 'Lokalbibliografi' source.
  if ($class == 'local_bibliography') {
    foreach($object->record['ac:source'] as $source) {
      if (in_array('Lokalbibliografi', $source)) {
        return TRUE;
      }
    }
  }

  // Local bibliography objects are never of limited availability,
  // cartable or reservable.
  if (in_array($class, array('limited_availability', 'cartable', 'reservable')) &&
     ting_object_is($object, 'local_bibliography')) {
    return FALSE;
  }

}

/**
 * Implementation of hook_ting_object_buttons()
 */
function ting_local_bibliography_ting_object_buttons($object) {
  if (ting_object_is($object, 'local_bibliography')) {
    // Add jquery validate library and localized messages
    drupal_add_js(drupal_get_path('module', 'ting_local_bibliography') . '/js/jquery-validate/jquery.validate.min.js');
    drupal_add_js(drupal_get_path('module', 'ting_local_bibliography') . '/js/jquery-validate/additional-methods.min.js');
    drupal_add_js(drupal_get_path('module', 'ting_local_bibliography') . '/js/jquery.validate.messages.drupal.js');

    // Add module javascript and css
    drupal_add_js(drupal_get_path('module', 'ting_local_bibliography') . '/js/ting_local_bibliography.buttons.js');
    drupal_add_css(drupal_get_path('module', 'ting_local_bibliography') . '/css/ting_local_bibliography.css');

    // Return the buttons
    return array(
      array(
        'data' => l(t('Order material'), 'ting/local_bibliography/order/'  . $object->id),
        'class' => 'local-bibliography-order'
      )
    );
  }
}

/**
 * Implementation of hook_preprocess_ting_object().
 */
function ting_local_bibliography_preprocess_ting_object(&$vars) {
  $object = $vars['object'];

  // Add object status to main content
  if (ting_object_is($object, 'local_bibliography')) {
    $vars['additional_main_content'] = array(
        '#type' => 'markup',
        '#weight' => 0,
        '#value' => theme('ting_local_bibliography_object_status', $object),
    );

    // If an object is a part of a collection and the collection exists as
    // a relation then make the relation a link
    if (!empty($object->record['dcterms:isPartOf'][''])) {
      foreach ($object->record['dcterms:isPartOf'][''] as &$isPartOf) {
        $host_object = FALSE;

        // Determine if there is a related object which this object is a part of
        if (isset($object->relations)) {
          foreach ($object->relations as $related_object) {
            if ($related_object->relationType == 'isPartOfManifestation' &&
                ($related_object->ownerId == $object->ownerId ||
                 $related_object->ownerId == variable_get('ting_agency', NULL))) {
              $host_object = $object;
            }
          }
        }

        // If object is a local bibliography object with a host object without a matching
        // relation then support ordering the object.
        if (!$host_object) {
          $isPartOf .= ' ' . l('Order material', 'ting/local_bibliography/order/'  . $isPartOf,
                               array('attributes' => array('class' => 'local-bibliography-order')));
        }
      }
    }
  }
}

/**
 * Implementation of hook_preprocess_ting_object().
 */
function ting_local_bibliography_preprocess_ting_list_item(&$vars) {
  $object = $vars['object'];

  // Add object status to main content
  if (ting_object_is($object, 'local_bibliography')) {
    $vars['additional_content'] = array(
        '#type' => 'markup',
        '#weight' => 0,
        '#value' => theme('ting_local_bibliography_object_status', $object),
    );
  }
}

/**
 * Implementation of hook_theme().
 */
function ting_local_bibliography_theme() {
  return array(
    'ting_local_bibliography_object_status' => array(
      'arguments' => array('object' => NULL),
    ),
  );
}

function theme_ting_local_bibliography_object_status($object) {
  return '<div class="ting-status local-bibliography">' . t('Local bibliography') . '</div>';
}

/**
 * Implementation of hook_email().
 */
function ting_local_bibliography_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}